/*
 * czmq_ppworker microblx function block (autogenerated, don't edit)
 */

#include <ubx.h>

/* includes types and type metadata */


/* block meta information */
char czmq_ppworker_meta[] =
        " { doc='',"
        "   real-time=true,"
        "}";

/* declaration of block configuration */
ubx_config_t czmq_ppworker_config[] = {
        { .name="connection_spec", .type_name = "char", .doc="Connection string that defines the ZMQ type of connection. E.g. tcp://localhost:11411" },
        { NULL },
};

/* declaration port block ports */
ubx_port_t czmq_ppworker_ports[] = {
        { .name="zmq_in", .out_type_name="unsigned char", .out_data_len=1, .doc="task received by server queue as ZMQ message."  },
        { NULL },
};

/* declare a struct port_cache */
struct czmq_ppworker_port_cache {
        ubx_port_t* zmq_in;
};

/* declare a helper function to update the port cache this is necessary
 * because the port ptrs can change if ports are dynamically added or
 * removed. This function should hence be called after all
 * initialization is done, i.e. typically in 'start'
 */
static void update_port_cache(ubx_block_t *b, struct czmq_ppworker_port_cache *pc)
{
        pc->zmq_in = ubx_port_get(b, "zmq_in");
}


/* for each port type, declare convenience functions to read/write from ports */
def_write_fun(write_zmq_in, unsigned char)

/* block operation forward declarations */
int czmq_ppworker_init(ubx_block_t *b);
int czmq_ppworker_start(ubx_block_t *b);
void czmq_ppworker_stop(ubx_block_t *b);
void czmq_ppworker_cleanup(ubx_block_t *b);
void czmq_ppworker_step(ubx_block_t *b);


/* put everything together */
ubx_block_t czmq_ppworker_block = {
        .name = "czmq_ppworker",
        .type = BLOCK_TYPE_COMPUTATION,
        .meta_data = czmq_ppworker_meta,
        .configs = czmq_ppworker_config,
        .ports = czmq_ppworker_ports,

        /* ops */
        .init = czmq_ppworker_init,
        .start = czmq_ppworker_start,
        .stop = czmq_ppworker_stop,
        .cleanup = czmq_ppworker_cleanup,
        .step = czmq_ppworker_step,
};


/* czmq_ppworker module init and cleanup functions */
int czmq_ppworker_mod_init(ubx_node_info_t* ni)
{
        DBG(" ");
        int ret = -1;

        if(ubx_block_register(ni, &czmq_ppworker_block) != 0)
                goto out;

        ret=0;
out:
        return ret;
}

void czmq_ppworker_mod_cleanup(ubx_node_info_t *ni)
{
        DBG(" ");
        ubx_block_unregister(ni, "czmq_ppworker");
}

